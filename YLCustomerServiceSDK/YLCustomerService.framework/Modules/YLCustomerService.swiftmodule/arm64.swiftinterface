// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 effective-4.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name YLCustomerService
import AVFoundation
import Accelerate
import CoreGraphics
import CoreImage
import Foundation
import ImageIO
import MobileCoreServices
import Photos
import Swift
import UIKit
@_exported import YLCustomerService
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class IMUITextRobotToHuman : UIKit.UIView, YLCustomerService.IMUIMessageContentViewProtocol {
  @objc weak public var delegate: YLCustomerService.IMUIMessageContentViewDelegate?
  @objc public static var outGoingTextColor: UIKit.UIColor?
  @objc public static var inComingTextColor: UIKit.UIColor
  @objc public static var outGoingTextFont: UIKit.UIFont
  @objc public static var inComingTextFont: UIKit.UIFont
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func layoutContentView(message: YLCustomerService.IMUIMessageModelProtocol)
  @objc deinit
}
extension Kingfisher where Base : YLCustomerService.ImageView {
  @discardableResult
  final public func setImage(with resource: YLCustomerService.Resource?, placeholder: YLCustomerService.Placeholder? = nil, options: YLCustomerService.KingfisherOptionsInfo? = nil, progressBlock: YLCustomerService.DownloadProgressBlock? = nil, completionHandler: YLCustomerService.CompletionHandler? = nil) -> YLCustomerService.RetrieveImageTask
  final public func cancelDownloadTask()
}
extension Kingfisher where Base : YLCustomerService.ImageView {
  final public var webURL: Foundation.URL? {
    get
  }
  final public var indicatorType: YLCustomerService.IndicatorType {
    get
    set(newValue)
  }
  final public var indicator: YLCustomerService.Indicator? {
    get
  }
  final public var placeholder: YLCustomerService.Placeholder? {
    get
  }
}
extension Kingfisher where Base : YLCustomerService.Image {
  final public var normalized: YLCustomerService.Image {
    get
  }
}
extension Kingfisher where Base : YLCustomerService.Image {
  final public func pngRepresentation() -> Foundation.Data?
  final public func jpegRepresentation(compressionQuality: CoreGraphics.CGFloat) -> Foundation.Data?
  final public func gifRepresentation() -> Foundation.Data?
}
extension Kingfisher where Base : YLCustomerService.Image {
  public static func animated(with data: Foundation.Data, scale: CoreGraphics.CGFloat = 1.0, duration: Foundation.TimeInterval = 0.0, preloadAll: Swift.Bool, onlyFirstFrame: Swift.Bool = false) -> YLCustomerService.Image?
  public static func image(data: Foundation.Data, scale: CoreGraphics.CGFloat, preloadAllAnimationData: Swift.Bool, onlyFirstFrame: Swift.Bool) -> YLCustomerService.Image?
}
extension Kingfisher where Base : YLCustomerService.Image {
  final public func image(withBlendMode blendMode: CoreGraphics.CGBlendMode, alpha: CoreGraphics.CGFloat = 1.0, backgroundColor: YLCustomerService.Color? = nil) -> YLCustomerService.Image
  final public func image(withRoundRadius radius: CoreGraphics.CGFloat, fit size: CoreGraphics.CGSize, roundingCorners corners: YLCustomerService.RectCorner = .all, backgroundColor: YLCustomerService.Color? = nil) -> YLCustomerService.Image
  final public func resize(to size: CoreGraphics.CGSize) -> YLCustomerService.Image
  final public func resize(to size: CoreGraphics.CGSize, for contentMode: YLCustomerService.ContentMode) -> YLCustomerService.Image
  final public func crop(to size: CoreGraphics.CGSize, anchorOn anchor: CoreGraphics.CGPoint) -> YLCustomerService.Image
  final public func blurred(withRadius radius: CoreGraphics.CGFloat) -> YLCustomerService.Image
  final public func overlaying(with color: YLCustomerService.Color, fraction: CoreGraphics.CGFloat) -> YLCustomerService.Image
  final public func tinted(with color: YLCustomerService.Color) -> YLCustomerService.Image
  final public func adjusted(brightness: CoreGraphics.CGFloat, contrast: CoreGraphics.CGFloat, saturation: CoreGraphics.CGFloat, inputEV: CoreGraphics.CGFloat) -> YLCustomerService.Image
  final public func scaled(to scale: CoreGraphics.CGFloat) -> YLCustomerService.Image
}
extension Kingfisher where Base : YLCustomerService.Image {
  final public var decoded: YLCustomerService.Image {
    get
  }
  final public func decoded(scale: CoreGraphics.CGFloat) -> YLCustomerService.Image
}
public enum ImageFormat {
  case unknown
  case PNG
  case JPEG
  case GIF
  public static func == (a: YLCustomerService.ImageFormat, b: YLCustomerService.ImageFormat) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct DataProxy {
}
extension Data : YLCustomerService.KingfisherCompatible {
  public typealias CompatibleType = YLCustomerService.DataProxy
  public var kf: YLCustomerService.DataProxy {
    get
  }
}
extension DataProxy {
  public var imageFormat: YLCustomerService.ImageFormat {
    get
  }
}
public struct CGSizeProxy {
}
extension CGSize : YLCustomerService.KingfisherCompatible {
  public typealias CompatibleType = YLCustomerService.CGSizeProxy
  public var kf: YLCustomerService.CGSizeProxy {
    get
  }
}
extension CGSizeProxy {
  public func resize(to size: CoreGraphics.CGSize, for contentMode: YLCustomerService.ContentMode) -> CoreGraphics.CGSize
  public func constrained(_ size: CoreGraphics.CGSize) -> CoreGraphics.CGSize
  public func filling(_ size: CoreGraphics.CGSize) -> CoreGraphics.CGSize
  public func constrainedRect(for size: CoreGraphics.CGSize, anchor: CoreGraphics.CGPoint) -> CoreGraphics.CGRect
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class IMUITextActivityContentView : UIKit.UIView, YLCustomerService.IMUIMessageContentViewProtocol, YLCustomerService.PasteboardTextViewDelegateall {
  @objc weak public var delegate: YLCustomerService.IMUIMessageContentViewDelegate?
  @objc public static var outGoingTextColor: UIKit.UIColor?
  @objc public static var inComingTextColor: UIKit.UIColor
  @objc public static var outGoingTextFont: UIKit.UIFont
  @objc public static var inComingTextFont: UIKit.UIFont
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func layoutContentView(message: YLCustomerService.IMUIMessageModelProtocol)
  @objc public func getContentSelected(_ attach: UIKit.NSTextAttachment!)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IMUITextTalkTimeContentView : UIKit.UIView, YLCustomerService.IMUIMessageContentViewProtocol {
  @objc weak public var delegate: YLCustomerService.IMUIMessageContentViewDelegate?
  public static var outGoingVideoDurationColor: UIKit.UIColor
  public static var inComingVideoDurationColor: UIKit.UIColor
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func layoutContentView(message: YLCustomerService.IMUIMessageModelProtocol)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class IMUIBaseMessageCell : UIKit.UICollectionViewCell, YLCustomerService.IMUIMessageContentViewDelegate, UIKit.UIGestureRecognizerDelegate {
  @objc public static var avatarCornerRadius: CoreGraphics.CGFloat
  @objc public static var backgroundColor: UIKit.UIColor
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func click(index: Swift.Int)
  @objc public func clickRobot(index: Swift.Int)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class IMUITextMessageContentView : UIKit.UIView, YLCustomerService.IMUIMessageContentViewProtocol {
  @objc weak public var delegate: YLCustomerService.IMUIMessageContentViewDelegate?
  @objc public static var outGoingTextColor: UIKit.UIColor?
  @objc public static var inComingTextColor: UIKit.UIColor
  @objc public static var outGoingTextFont: UIKit.UIFont
  @objc public static var inComingTextFont: UIKit.UIFont
  @objc public static var atTextColor: UIKit.UIColor
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func layoutContentView(message: YLCustomerService.IMUIMessageModelProtocol)
  @objc deinit
}
@objc public class IMUIFeatureIconModel : ObjectiveC.NSObject {
  public var photoCount: Swift.Int?
  public var isAllowToSend: Swift.Bool?
  public init(featureType: YLCustomerService.IMUIFeatureType, _ defoultImage: UIKit.UIImage?, _ selectedImage: UIKit.UIImage?, _ photoCount: Swift.Int?, _ isAllowToSend: Swift.Bool?)
  @objc deinit
  @objc override dynamic public init()
}
public typealias IndicatorView = UIKit.UIView
public enum IndicatorType {
  case none
  case activity
  case image(imageData: Foundation.Data)
  case custom(indicator: YLCustomerService.Indicator)
}
public protocol Indicator {
  func startAnimatingView()
  func stopAnimatingView()
  var viewCenter: CoreGraphics.CGPoint { get set }
  var view: YLCustomerService.IndicatorView { get }
}
extension Indicator {
  public var viewCenter: CoreGraphics.CGPoint {
    get
    set(newValue)
  }
}
@objc public protocol IMUICustomInputViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func textDidChange(text: Swift.String)
  @objc optional func keyBoardWillShow(height: CoreGraphics.CGFloat, durationTime: Swift.Double)
}
extension NSNotification.Name {
  public static var KingfisherDidCleanDiskCache: Foundation.Notification.Name
}
public var KingfisherDiskCacheCleanedHashKey: Swift.String
public typealias RetrieveImageDiskTask = Dispatch.DispatchWorkItem
public enum CacheType {
  case none
  case memory
  case disk
  public var cached: Swift.Bool {
    get
  }
  public static func == (a: YLCustomerService.CacheType, b: YLCustomerService.CacheType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
open class ImageCache {
  open var maxMemoryCost: Swift.UInt {
    get
    set(value)
  }
  final public let diskCachePath: Swift.String
  open var pathExtension: Swift.String?
  open var maxCachePeriodInSecond: Swift.Double
  open var maxDiskCacheSize: Swift.UInt
  public static var `default`: YLCustomerService.ImageCache
  public typealias DiskCachePathClosure = (Swift.String?, Swift.String) -> Swift.String
  final public class func defaultDiskCachePathClosure(path: Swift.String?, cacheName: Swift.String) -> Swift.String
  public init(name: Swift.String, path: Swift.String? = nil, diskCachePathClosure: (Swift.String?, Swift.String) -> Swift.String = ImageCache.defaultDiskCachePathClosure)
  @objc deinit
  open func store(_ image: YLCustomerService.Image, original: Foundation.Data? = nil, forKey key: Swift.String, processorIdentifier identifier: Swift.String = "", cacheSerializer serializer: YLCustomerService.CacheSerializer = DefaultCacheSerializer.default, toDisk: Swift.Bool = true, completionHandler: (() -> Swift.Void)? = nil)
  open func removeImage(forKey key: Swift.String, processorIdentifier identifier: Swift.String = "", fromMemory: Swift.Bool = true, fromDisk: Swift.Bool = true, completionHandler: (() -> Swift.Void)? = nil)
  @discardableResult
  open func retrieveImage(forKey key: Swift.String, options: YLCustomerService.KingfisherOptionsInfo?, completionHandler: ((YLCustomerService.Image?, YLCustomerService.CacheType) -> Swift.Void)?) -> YLCustomerService.RetrieveImageDiskTask?
  open func retrieveImageInMemoryCache(forKey key: Swift.String, options: YLCustomerService.KingfisherOptionsInfo? = nil) -> YLCustomerService.Image?
  open func retrieveImageInDiskCache(forKey key: Swift.String, options: YLCustomerService.KingfisherOptionsInfo? = nil) -> YLCustomerService.Image?
  @objc public func clearMemoryCache()
  open func clearDiskCache(completion handler: (() -> ())? = nil)
  open func cleanExpiredDiskCache(completion handler: (() -> ())? = nil)
  @objc public func backgroundCleanExpiredDiskCache()
  open func imageCachedType(forKey key: Swift.String, processorIdentifier identifier: Swift.String = "") -> YLCustomerService.CacheType
  open func hash(forKey key: Swift.String, processorIdentifier identifier: Swift.String = "") -> Swift.String
  open func calculateDiskCacheSize(completion handler: @escaping ((Swift.UInt) -> Swift.Void))
  open func cachePath(forKey key: Swift.String, processorIdentifier identifier: Swift.String = "") -> Swift.String
  open func cachePath(forComputedKey key: Swift.String) -> Swift.String
}
extension ImageCache {
  @available(*, deprecated, message: "CacheCheckResult is deprecated. Use imageCachedType(forKey:processorIdentifier:) API instead.")
  public struct CacheCheckResult {
    public let cached: Swift.Bool
    public let cacheType: YLCustomerService.CacheType?
  }
  @available(*, deprecated, renamed: "imageCachedType(forKey:processorIdentifier:)", message: "Use imageCachedType(forKey:processorIdentifier:) instead. CacheCheckResult.none indicates not being cached.")
  open func isImageCached(forKey key: Swift.String, processorIdentifier identifier: Swift.String = "") -> YLCustomerService.ImageCache.CacheCheckResult
}
extension UIApplication : YLCustomerService.KingfisherCompatible {
  public typealias CompatibleType = YLCustomerService.Kingfisher<UIKit.UIApplication>
}
extension Kingfisher where Base : UIKit.UIApplication {
  public static var shared: UIKit.UIApplication? {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class IMUITextExpendButton : UIKit.UIView {
  @objc public static var TextColor: UIKit.UIColor
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@objc public enum IMUIMessageStatus : Swift.UInt {
  case failed
  case sending
  case success
  case mediaDownloading
  case mediaDownloadFail
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
public protocol IMUIMessageDataSource {
  func messageArray(with offset: Foundation.NSNumber, limit: Foundation.NSNumber) -> [YLCustomerService.IMUIMessageModelProtocol]
}
@objc open class IMUIMessageModel : ObjectiveC.NSObject, YLCustomerService.IMUIMessageModelProtocol {
  @objc public var duration: CoreGraphics.CGFloat
  @objc open var msgId: Swift.String
  @objc open var messageStatus: YLCustomerService.IMUIMessageStatus
  @objc open var fromUser: YLCustomerService.IMUIUserProtocol
  @objc open var isOutGoing: Swift.Bool
  open var time: Swift.String
  @objc open var timeString: Swift.String {
    @objc get
  }
  open var isNeedShowTime: Swift.Bool {
    get
  }
  open var type: Swift.String
  @objc open var layout: YLCustomerService.IMUIMessageCellLayoutProtocol {
    @objc get
  }
  open var cellLayout: YLCustomerService.IMUIMessageCellLayoutProtocol?
  @objc open func text() -> Swift.String
  @objc open func dictionary() -> Swift.Dictionary<Swift.String, Any>
  @objc open func mediaFilePath() -> Swift.String
  @objc open func webImageUrl() -> Swift.String
  public init(msgId: Swift.String, messageStatus: YLCustomerService.IMUIMessageStatus, fromUser: YLCustomerService.IMUIUserProtocol, isOutGoing: Swift.Bool, time: Swift.String, type: Swift.String, cellLayout: YLCustomerService.IMUIMessageCellLayoutProtocol, duration: CoreGraphics.CGFloat?, isSystem: Swift.Bool)
  @objc open var resizableBubbleImage: UIKit.UIImage {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class IMUIMessageCollectionView : UIKit.UIView {
  @objc @IBOutlet weak open var messageCollectionView: UIKit.UICollectionView!
  @objc weak open var delegate: YLCustomerService.IMUIMessageMessageCollectionViewDelegate?
  @objc override dynamic open func awakeFromNib()
  @objc override dynamic open var bounds: CoreGraphics.CGRect {
    @objc get
    @objc set(value)
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func layoutSubviews()
  open func register(_ cellClass: Swift.AnyClass?, forCellWithReuseIdentifier identifier: Swift.String)
  open subscript(index: Swift.Int) -> YLCustomerService.IMUIMessageProtocol {
    get
  }
  open subscript(msgId: Swift.String) -> YLCustomerService.IMUIMessageProtocol? {
    get
  }
  @objc open var messageCount: Swift.Int {
    @objc get
  }
  @objc open func scrollToBottom(with animated: Swift.Bool)
  @objc open func scrollToBottomSync(with animated: Swift.Bool)
  @objc open func appendMessage(with message: YLCustomerService.IMUIMessageProtocol)
  @objc open func appendMessage(with message: YLCustomerService.IMUIMessageProtocol, messageId: Swift.String)
  @objc open func insertMessage(with message: YLCustomerService.IMUIMessageProtocol)
  @objc open func insertMessages(with messages: [YLCustomerService.IMUIMessageProtocol])
  @objc open func updateMessage(with message: YLCustomerService.IMUIMessageProtocol)
  @objc open func removeMessage(with messageId: Swift.String)
  @objc open func removeAllMessages()
  @objc open func reloadMessageNotification()
  @objc open func getMessage(with messageId: Swift.String) -> YLCustomerService.IMUIMessageProtocol?
  @objc deinit
}
extension IMUIMessageCollectionView : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didEndDisplaying: UIKit.UICollectionViewCell, forItemAt: Foundation.IndexPath)
}
extension IMUIMessageCollectionView : UIKit.UIScrollViewDelegate {
  @objc dynamic public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
}
extension UICollectionView {
  public func reloadDataNoScroll()
  public func reloadDataHorizontalNoScroll()
}
public protocol ImageDownloadRequestModifier {
  func modified(for request: Foundation.URLRequest) -> Foundation.URLRequest?
}
public struct AnyModifier : YLCustomerService.ImageDownloadRequestModifier {
  public func modified(for request: Foundation.URLRequest) -> Foundation.URLRequest?
  public init(modify: @escaping (Foundation.URLRequest) -> Foundation.URLRequest?)
}
public enum IMUIEmojiType {
  case emoji
  case image
  case gif
  public static func == (a: YLCustomerService.IMUIEmojiType, b: YLCustomerService.IMUIEmojiType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public class IMUIEmojiModel : ObjectiveC.NSObject {
  public init(_ emojiType: YLCustomerService.IMUIEmojiType, _ emoji: Swift.String?, _ mediaPath: Swift.String?)
  public convenience init(emojiType: YLCustomerService.IMUIEmojiType, emoji: Swift.String)
  public convenience init(emojiType: YLCustomerService.IMUIEmojiType, mediaPath: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
public protocol IMUIFeatureCellProtocol {
  var featureDelegate: YLCustomerService.IMUIFeatureViewDelegate? { get set }
  func activateMedia()
  func inactivateMedia()
}
extension IMUIFeatureCellProtocol {
  public var featureDelegate: YLCustomerService.IMUIFeatureViewDelegate? {
    get
    set(newValue)
  }
  public func activateMedia()
  public func inactivateMedia()
}
@objc open class IMUIFeatureView : UIKit.UIView {
  @objc @IBOutlet weak open var featureCollectionView: UIKit.UICollectionView!
  @objc override dynamic open func awakeFromNib()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public func register(_ cellClass: Swift.AnyClass?, forCellWithReuseIdentifier identifier: Swift.String)
  public func register(_ nib: UIKit.UINib?, forCellWithReuseIdentifier identifier: Swift.String)
  open func layoutFeature(with type: YLCustomerService.IMUIFeatureType)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
extension IMUIFeatureView : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForFooterInSection section: Swift.Int) -> CoreGraphics.CGSize
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didEndDisplaying: UIKit.UICollectionViewCell, forItemAt: Foundation.IndexPath)
}
public typealias downloadCompletionHandler = ((Foundation.Data?, Swift.Float, Swift.String, Swift.Error?) -> Swift.Void)
@_hasMissingDesignatedInitializers public class IMUIWebImageDownloader {
  public func getRequestUrl() -> Swift.String
  public func addCallback(callback: @escaping YLCustomerService.downloadCompletionHandler)
  public func appendData(with data: Foundation.Data)
  public func dispatchDownloader(_ session: Foundation.URLSession, _ urlRequest: Foundation.URLRequest) -> Foundation.URLSessionTask?
  public func completionHandler(with error: Swift.Error?)
  @objc deinit
}
public enum IMUIFeatureType {
  case voice
  case gallery
  case camera
  case location
  case emoji
  case empty
  case none
  public static func == (a: YLCustomerService.IMUIFeatureType, b: YLCustomerService.IMUIFeatureType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol IMUIFeatureViewDelegate : ObjectiveC.NSObjectProtocol {
  func didSelectPhoto(with images: [UIKit.UIImage])
  func startRecordVoice()
  func didRecordVoice(with voicePath: Swift.String, durationTime: Swift.Double)
  func didShotPicture(with image: Foundation.Data)
  func startRecordVideo()
  func didRecordVideo(with videoPath: Swift.String, durationTime: Swift.Double)
  func didSeletedEmoji(with emoji: YLCustomerService.IMUIEmojiModel)
  func didChangeSelectedGallery(with gallerys: [Photos.PHAsset])
  func cameraFullScreen()
  func cameraRecoverScreen()
}
extension IMUIFeatureViewDelegate {
  public func didSelectPhoto(with images: [UIKit.UIImage])
  public func startRecordVoice()
  public func didRecordVoice(with voicePath: Swift.String, durationTime: Swift.Double)
  public func didShotPicture(with image: Foundation.Data)
  public func startRecordVideo()
  public func didRecordVideo(with videoPath: Swift.String, durationTime: Swift.Double)
  public func didSeletedEmoji(with emoji: YLCustomerService.IMUIEmojiModel)
  public func didChangeSelectedGallery()
  public func cameraFullScreen()
  public func cameraRecoverScreen()
}
@objc @_inheritsConvenienceInitializers open class IMUIInputView : YLCustomerService.IMUICustomInputView {
  @objc weak public var delegate: YLCustomerService.IMUIInputViewDelegate?
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc override dynamic open func awakeFromNib()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func setupDataWithDic(dic: [Swift.String : [Swift.String]])
  @objc public func isNeedShowBottomView() -> Swift.Bool
  @objc deinit
}
extension IMUIInputView : YLCustomerService.IMUICustomInputViewDataSource {
  @objc dynamic public func imuiInputView(_ inputBarItemListView: UIKit.UICollectionView, numberForItemAt position: YLCustomerService.IMUIInputViewItemPosition) -> Swift.Int
  @objc dynamic public func imuiInputView(_ inputBarItemListView: UIKit.UICollectionView, _ position: YLCustomerService.IMUIInputViewItemPosition, sizeForIndex indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc dynamic public func imuiInputView(_ inputBarItemListView: UIKit.UICollectionView, _ position: YLCustomerService.IMUIInputViewItemPosition, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc dynamic public func imuiInputView(_ featureView: UIKit.UICollectionView, cellForItem indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension IMUIInputView : YLCustomerService.IMUIFeatureListDelegate {
  public func updateSendBtnToPhotoSendStatus()
}
extension IMUIInputView : YLCustomerService.IMUIFeatureViewDelegate {
  public func cameraRecoverScreen()
  public func cameraFullScreen()
  public func didChangeSelectedGallery(with gallerys: [Photos.PHAsset])
  public func didSelectPhoto(with images: [UIKit.UIImage])
  public func didSeletedEmoji(with emoji: YLCustomerService.IMUIEmojiModel)
  public func didRecordVoice(with voicePath: Swift.String, durationTime: Swift.Double)
  public func didShotPicture(with image: Foundation.Data)
  public func startRecordVideo()
  public func startRecordVoice()
  public func didRecordVideo(with videoPath: Swift.String, durationTime: Swift.Double)
}
extension IMUIInputView : YLCustomerService.IMUICustomInputViewDelegate {
  @objc dynamic public func textDidChange(text: Swift.String)
  @objc dynamic public func keyBoardWillShow(height: CoreGraphics.CGFloat, durationTime: Swift.Double)
}
public struct FormatIndicatedCacheSerializer : YLCustomerService.CacheSerializer {
  public static var png: YLCustomerService.FormatIndicatedCacheSerializer
  public static var jpeg: YLCustomerService.FormatIndicatedCacheSerializer
  public static var gif: YLCustomerService.FormatIndicatedCacheSerializer
  public func data(with image: YLCustomerService.Image, original: Foundation.Data?) -> Foundation.Data?
  public func image(with data: Foundation.Data, options: YLCustomerService.KingfisherOptionsInfo?) -> YLCustomerService.Image?
}
extension UIImage {
  public class func imuiImage(with name: Swift.String) -> UIKit.UIImage?
}
@objc public protocol IMUICustomInputViewDataSource : ObjectiveC.NSObjectProtocol {
  @objc func imuiInputView(_ inputBarItemListView: UIKit.UICollectionView, numberForItemAt position: YLCustomerService.IMUIInputViewItemPosition) -> Swift.Int
  @objc func imuiInputView(_ inputBarItemListView: UIKit.UICollectionView, _ position: YLCustomerService.IMUIInputViewItemPosition, sizeForIndex indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc func imuiInputView(_ inputBarItemListView: UIKit.UICollectionView, _ position: YLCustomerService.IMUIInputViewItemPosition, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc func imuiInputView(_ featureView: UIKit.UICollectionView, cellForItem indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
@objc open class IMUIMessageCellLayout : ObjectiveC.NSObject, YLCustomerService.IMUIMessageCellLayoutProtocol {
  @objc public var isExpend: Swift.Bool
  @objc public var isExpendText: Swift.Bool
  open var isNeedHeader: Swift.Bool
  open var avatarSize: CoreGraphics.CGSize {
    get
  }
  @objc public static var avatarPadding: UIKit.UIEdgeInsets
  @objc public static var avatarSizeNone: CoreGraphics.CGSize
  @objc public static var timeLabelPadding: UIKit.UIEdgeInsets
  @objc public static var nameLabelSize: CoreGraphics.CGSize
  @objc public static var nameLabelPadding: UIKit.UIEdgeInsets
  @objc public static var bubblePadding: UIKit.UIEdgeInsets
  @objc public static var cellWidth: CoreGraphics.CGFloat
  @objc public static var cellContentInset: UIKit.UIEdgeInsets
  @objc public static var statusViewSize: CoreGraphics.CGSize
  @objc public static var statusViewOffsetToBubble: UIKit.UIOffset
  @objc public static var bubbleMaxWidth: CoreGraphics.CGFloat
  @objc public static var bubbleMaxWidthHorizontal: CoreGraphics.CGFloat
  @objc public static var isNeedShowInComingName: Swift.Bool
  @objc public static var isNeedShowOutGoingName: Swift.Bool
  @objc public static var isNeedShowInComingAvatar: Swift.Bool
  @objc public static var isNeedShowOutGoingAvatar: Swift.Bool
  @objc public static var nameLabelTextColor: UIKit.UIColor
  @objc public static var nameLabelTextFont: UIKit.UIFont
  @objc public static var nameLablePadding: UIKit.UIEdgeInsets
  @objc public static var timeStringColor: UIKit.UIColor
  @objc public static var timeStringFont: UIKit.UIFont
  @objc public static var timeStringBackgroundColor: UIKit.UIColor
  @objc public static var timeStringCornerRadius: CoreGraphics.CGFloat
  @objc public static var expendEdgeHeight: CoreGraphics.CGFloat
  @objc public static var expendButtonHeight: CoreGraphics.CGFloat
  @objc public init(isOutGoingMessage: Swift.Bool, isNeedHeader: Swift.Bool, isNeedShowTime: Swift.Bool, bubbleContentSize: CoreGraphics.CGSize, bubbleContentInsets: UIKit.UIEdgeInsets, timeLabelContentSize: CoreGraphics.CGSize)
  open var isOutGoingMessage: Swift.Bool
  open var isNeedShowTime: Swift.Bool
  open var timeLabelContentSize: CoreGraphics.CGSize
  @objc open var bubbleContentSize: CoreGraphics.CGSize
  open var bubbleContentInsets: UIKit.UIEdgeInsets
  open var bubbleSize: CoreGraphics.CGSize {
    get
  }
  open var bubbleContentFrame: CoreGraphics.CGRect {
    get
  }
  public var relativeStatusViewOffsetToBubble: UIKit.UIOffset {
    get
  }
  @objc open var bubbleContentInset: UIKit.UIEdgeInsets {
    @objc get
  }
  @objc open var nameLabelFrame: CoreGraphics.CGRect {
    @objc get
  }
  @objc open var avatarFrame: CoreGraphics.CGRect {
    @objc get
  }
  @objc open var timeLabelFrame: CoreGraphics.CGRect {
    @objc get
  }
  @objc open var cellHeight: CoreGraphics.CGFloat {
    @objc get
  }
  @objc open var bubbleFrame: CoreGraphics.CGRect {
    @objc get
  }
  @objc open var cellContentInset: UIKit.UIEdgeInsets {
    @objc get
  }
  @objc open var statusView: YLCustomerService.IMUIMessageStatusViewProtocol {
    @objc get
  }
  @objc open var statusViewFrame: CoreGraphics.CGRect {
    @objc get
  }
  @objc open var bubbleContentView: YLCustomerService.IMUIMessageContentViewProtocol {
    @objc get
  }
  @objc open var bubbleContentType: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
public protocol AnimatedImageViewDelegate : AnyObject {
  func animatedImageView(_ imageView: YLCustomerService.AnimatedImageView, didPlayAnimationLoops count: Swift.UInt)
  func animatedImageViewDidFinishAnimating(_ imageView: YLCustomerService.AnimatedImageView)
}
extension AnimatedImageViewDelegate {
  public func animatedImageView(_ imageView: YLCustomerService.AnimatedImageView, didPlayAnimationLoops count: Swift.UInt)
  public func animatedImageViewDidFinishAnimating(_ imageView: YLCustomerService.AnimatedImageView)
}
@objc @_inheritsConvenienceInitializers open class AnimatedImageView : UIKit.UIImageView {
  public enum RepeatCount : Swift.Equatable {
    case once
    case finite(count: Swift.UInt)
    case infinite
    public static func == (lhs: YLCustomerService.AnimatedImageView.RepeatCount, rhs: YLCustomerService.AnimatedImageView.RepeatCount) -> Swift.Bool
  }
  public var autoPlayAnimatedImage: Swift.Bool
  public var framePreloadCount: Swift.Int
  public var needsPrescaling: Swift.Bool
  public var runLoopMode: Foundation.RunLoop.Mode {
    get
    set(value)
  }
  public var repeatCount: YLCustomerService.AnimatedImageView.RepeatCount {
    get
    set(value)
  }
  weak public var delegate: YLCustomerService.AnimatedImageViewDelegate?
  @objc override dynamic open var image: YLCustomerService.Image? {
    @objc get
    @objc set(value)
  }
  @objc deinit
  @objc override dynamic open var isAnimating: Swift.Bool {
    @objc get
  }
  @objc override dynamic open func startAnimating()
  @objc override dynamic open func stopAnimating()
  @objc override dynamic open func display(_ layer: QuartzCore.CALayer)
  @objc override dynamic open func didMoveToWindow()
  @objc override dynamic open func didMoveToSuperview()
  @objc override dynamic public init(image: UIKit.UIImage?)
  @available(iOS 3.0, *)
  @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension CGImageSource : YLCustomerService.KingfisherCompatible {
  public typealias CompatibleType = YLCustomerService.Kingfisher<ImageIO.CGImageSource>
}
extension UIImage {
  public var jpegRepresentationData: Foundation.Data! {
    get
  }
  public var pngRepresentationData: Foundation.Data! {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IMUIVideoMessageContentView : UIKit.UIView, YLCustomerService.IMUIMessageContentViewProtocol {
  @objc weak public var delegate: YLCustomerService.IMUIMessageContentViewDelegate?
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func layoutContentView(message: YLCustomerService.IMUIMessageModelProtocol)
  @objc deinit
}
@objc public protocol IMUIFeatureListDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func onSelectedFeature(with cell: YLCustomerService.IMUIFeatureListIconCell)
  @objc optional func onClickSend(with cell: YLCustomerService.IMUIFeatureListIconCell)
}
@objc open class IMUIFeatureListView : UIKit.UIView {
  public static var featureListItemSpace: CoreGraphics.CGFloat
  public static var featureListBtnWidth: Swift.Int
  @objc @IBOutlet weak open var featureListCollectionView: UIKit.UICollectionView!
  weak public var delegate: YLCustomerService.IMUIFeatureListDelegate?
  weak public var dataSource: YLCustomerService.IMUICustomInputViewDataSource? {
    get
    set(newValue)
  }
  public var position: YLCustomerService.IMUIInputViewItemPosition?
  public var totalWidth: CoreGraphics.CGFloat {
    get
  }
  @objc override dynamic open func awakeFromNib()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public func layoutFeatureListToCenter()
  @objc override dynamic open var bounds: CoreGraphics.CGRect {
    @objc get
    @objc set(value)
  }
  public func register(_ cellClass: Swift.AnyClass?, forCellWithReuseIdentifier identifier: Swift.String)
  public func register(_ nib: UIKit.UINib?, forCellWithReuseIdentifier identifier: Swift.String)
  public func reloadData()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
extension IMUIFeatureListView : UIKit.UICollectionViewDelegate {
}
extension IMUIFeatureListView : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForFooterInSection section: Swift.Int) -> CoreGraphics.CGSize
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension Bundle {
  public class func imuiBundle() -> Foundation.Bundle
}
public typealias ImageDownloaderProgressBlock = YLCustomerService.DownloadProgressBlock
public typealias ImageDownloaderCompletionHandler = ((YLCustomerService.Image?, Foundation.NSError?, Foundation.URL?, Foundation.Data?) -> Swift.Void)
public struct RetrieveImageDownloadTask {
  weak public var ownerDownloader: YLCustomerService.ImageDownloader? {
    get
  }
  public func cancel()
  public var url: Foundation.URL? {
    get
  }
  public var priority: Swift.Float {
    get
    set(newValue)
  }
}
public enum KingfisherError : Swift.Int {
  case badData
  case notModified
  case invalidStatusCode
  case notCached
  case invalidURL
  case downloadCancelledBeforeStarting
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public var KingfisherErrorStatusCodeKey: Swift.String
public protocol ImageDownloaderDelegate : AnyObject {
  func imageDownloader(_ downloader: YLCustomerService.ImageDownloader, willDownloadImageForURL url: Foundation.URL, with request: Foundation.URLRequest?)
  func imageDownloader(_ downloader: YLCustomerService.ImageDownloader, didFinishDownloadingImageForURL url: Foundation.URL, with response: Foundation.URLResponse?, error: Swift.Error?)
  func imageDownloader(_ downloader: YLCustomerService.ImageDownloader, didDownload image: YLCustomerService.Image, for url: Foundation.URL, with response: Foundation.URLResponse?)
  func isValidStatusCode(_ code: Swift.Int, for downloader: YLCustomerService.ImageDownloader) -> Swift.Bool
  func imageDownloader(_ downloader: YLCustomerService.ImageDownloader, didDownload data: Foundation.Data, for url: Foundation.URL) -> Foundation.Data?
}
extension ImageDownloaderDelegate {
  public func imageDownloader(_ downloader: YLCustomerService.ImageDownloader, willDownloadImageForURL url: Foundation.URL, with request: Foundation.URLRequest?)
  public func imageDownloader(_ downloader: YLCustomerService.ImageDownloader, didFinishDownloadingImageForURL url: Foundation.URL, with response: Foundation.URLResponse?, error: Swift.Error?)
  public func imageDownloader(_ downloader: YLCustomerService.ImageDownloader, didDownload image: YLCustomerService.Image, for url: Foundation.URL, with response: Foundation.URLResponse?)
  public func isValidStatusCode(_ code: Swift.Int, for downloader: YLCustomerService.ImageDownloader) -> Swift.Bool
  public func imageDownloader(_ downloader: YLCustomerService.ImageDownloader, didDownload data: Foundation.Data, for url: Foundation.URL) -> Foundation.Data?
}
public protocol AuthenticationChallengeResponsable : AnyObject {
  func downloader(_ downloader: YLCustomerService.ImageDownloader, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  func downloader(_ downloader: YLCustomerService.ImageDownloader, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
}
open class ImageDownloader {
  open var downloadTimeout: Swift.Double
  open var trustedHosts: Swift.Set<Swift.String>?
  open var sessionConfiguration: Foundation.URLSessionConfiguration {
    get
    set(value)
  }
  open var requestsUsePipelining: Swift.Bool
  weak open var delegate: YLCustomerService.ImageDownloaderDelegate?
  weak open var authenticationChallengeResponder: YLCustomerService.AuthenticationChallengeResponsable?
  public static var `default`: YLCustomerService.ImageDownloader
  public init(name: Swift.String)
  @objc deinit
  @discardableResult
  open func downloadImage(with url: Foundation.URL, retrieveImageTask: YLCustomerService.RetrieveImageTask? = nil, options: YLCustomerService.KingfisherOptionsInfo? = nil, progressBlock: YLCustomerService.ImageDownloaderProgressBlock? = nil, completionHandler: YLCustomerService.ImageDownloaderCompletionHandler? = nil) -> YLCustomerService.RetrieveImageDownloadTask?
}
extension ImageDownloader {
  public func cancelAll()
}
extension ImageDownloader : YLCustomerService.ImageDownloaderDelegate {
}
@objc @_inheritsConvenienceInitializers public class IMUIFeatureListIconCell : UIKit.UICollectionViewCell {
  @objc @IBOutlet weak public var featureIconBtn: UIKit.UIButton!
  open var featureData: YLCustomerService.IMUIFeatureIconModel?
  @objc override dynamic public func awakeFromNib()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  public func layout(with data: YLCustomerService.IMUIFeatureIconModel, onClickCallback: @escaping (YLCustomerService.IMUIFeatureListIconCell) -> ())
  @objc deinit
}
public enum ImageTransition {
  case none
  case fade(Foundation.TimeInterval)
  case flipFromLeft(Foundation.TimeInterval)
  case flipFromRight(Foundation.TimeInterval)
  case flipFromTop(Foundation.TimeInterval)
  case flipFromBottom(Foundation.TimeInterval)
  case custom(duration: Foundation.TimeInterval, options: UIKit.UIView.AnimationOptions, animations: ((UIKit.UIImageView, UIKit.UIImage) -> Swift.Void)?, completion: ((Swift.Bool) -> Swift.Void)?)
}
@objc public protocol IMUIUserProtocol : ObjectiveC.NSObjectProtocol {
  @objc func userId() -> Swift.String
  @objc func displayName() -> Swift.String
  @objc func Avatar() -> UIKit.UIImage?
  @objc optional func avatarUrlString() -> Swift.String?
}
public enum ImageProcessItem {
  case image(YLCustomerService.Image)
  case data(Foundation.Data)
}
public protocol ImageProcessor {
  var identifier: Swift.String { get }
  func process(item: YLCustomerService.ImageProcessItem, options: YLCustomerService.KingfisherOptionsInfo) -> YLCustomerService.Image?
}
extension ImageProcessor {
  public func append(another: YLCustomerService.ImageProcessor) -> YLCustomerService.ImageProcessor
}
public struct DefaultImageProcessor : YLCustomerService.ImageProcessor {
  public static var `default`: YLCustomerService.DefaultImageProcessor
  public let identifier: Swift.String
  public init()
  public func process(item: YLCustomerService.ImageProcessItem, options: YLCustomerService.KingfisherOptionsInfo) -> YLCustomerService.Image?
}
public struct RectCorner : Swift.OptionSet {
  public let rawValue: Swift.Int
  public static var topLeft: YLCustomerService.RectCorner
  public static var topRight: YLCustomerService.RectCorner
  public static var bottomLeft: YLCustomerService.RectCorner
  public static var bottomRight: YLCustomerService.RectCorner
  public static var all: YLCustomerService.RectCorner
  public init(rawValue: Swift.Int)
  public typealias Element = YLCustomerService.RectCorner
  public typealias ArrayLiteralElement = YLCustomerService.RectCorner
  public typealias RawValue = Swift.Int
}
public struct BlendImageProcessor : YLCustomerService.ImageProcessor {
  public let identifier: Swift.String
  public let blendMode: CoreGraphics.CGBlendMode
  public let alpha: CoreGraphics.CGFloat
  public let backgroundColor: YLCustomerService.Color?
  public init(blendMode: CoreGraphics.CGBlendMode, alpha: CoreGraphics.CGFloat = 1.0, backgroundColor: YLCustomerService.Color? = nil)
  public func process(item: YLCustomerService.ImageProcessItem, options: YLCustomerService.KingfisherOptionsInfo) -> YLCustomerService.Image?
}
public struct RoundCornerImageProcessor : YLCustomerService.ImageProcessor {
  public let identifier: Swift.String
  public let cornerRadius: CoreGraphics.CGFloat
  public let roundingCorners: YLCustomerService.RectCorner
  public let targetSize: CoreGraphics.CGSize?
  public let backgroundColor: YLCustomerService.Color?
  public init(cornerRadius: CoreGraphics.CGFloat, targetSize: CoreGraphics.CGSize? = nil, roundingCorners corners: YLCustomerService.RectCorner = .all, backgroundColor: YLCustomerService.Color? = nil)
  public func process(item: YLCustomerService.ImageProcessItem, options: YLCustomerService.KingfisherOptionsInfo) -> YLCustomerService.Image?
}
public enum ContentMode {
  case none
  case aspectFit
  case aspectFill
  public static func == (a: YLCustomerService.ContentMode, b: YLCustomerService.ContentMode) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct ResizingImageProcessor : YLCustomerService.ImageProcessor {
  public let identifier: Swift.String
  public let referenceSize: CoreGraphics.CGSize
  public let targetContentMode: YLCustomerService.ContentMode
  public init(referenceSize: CoreGraphics.CGSize, mode: YLCustomerService.ContentMode = .none)
  public func process(item: YLCustomerService.ImageProcessItem, options: YLCustomerService.KingfisherOptionsInfo) -> YLCustomerService.Image?
}
public struct BlurImageProcessor : YLCustomerService.ImageProcessor {
  public let identifier: Swift.String
  public let blurRadius: CoreGraphics.CGFloat
  public init(blurRadius: CoreGraphics.CGFloat)
  public func process(item: YLCustomerService.ImageProcessItem, options: YLCustomerService.KingfisherOptionsInfo) -> YLCustomerService.Image?
}
public struct OverlayImageProcessor : YLCustomerService.ImageProcessor {
  public let identifier: Swift.String
  public let overlay: YLCustomerService.Color
  public let fraction: CoreGraphics.CGFloat
  public init(overlay: YLCustomerService.Color, fraction: CoreGraphics.CGFloat = 0.5)
  public func process(item: YLCustomerService.ImageProcessItem, options: YLCustomerService.KingfisherOptionsInfo) -> YLCustomerService.Image?
}
public struct TintImageProcessor : YLCustomerService.ImageProcessor {
  public let identifier: Swift.String
  public let tint: YLCustomerService.Color
  public init(tint: YLCustomerService.Color)
  public func process(item: YLCustomerService.ImageProcessItem, options: YLCustomerService.KingfisherOptionsInfo) -> YLCustomerService.Image?
}
public struct ColorControlsProcessor : YLCustomerService.ImageProcessor {
  public let identifier: Swift.String
  public let brightness: CoreGraphics.CGFloat
  public let contrast: CoreGraphics.CGFloat
  public let saturation: CoreGraphics.CGFloat
  public let inputEV: CoreGraphics.CGFloat
  public init(brightness: CoreGraphics.CGFloat, contrast: CoreGraphics.CGFloat, saturation: CoreGraphics.CGFloat, inputEV: CoreGraphics.CGFloat)
  public func process(item: YLCustomerService.ImageProcessItem, options: YLCustomerService.KingfisherOptionsInfo) -> YLCustomerService.Image?
}
public struct BlackWhiteProcessor : YLCustomerService.ImageProcessor {
  public let identifier: Swift.String
  public init()
  public func process(item: YLCustomerService.ImageProcessItem, options: YLCustomerService.KingfisherOptionsInfo) -> YLCustomerService.Image?
}
public struct CroppingImageProcessor : YLCustomerService.ImageProcessor {
  public let identifier: Swift.String
  public let size: CoreGraphics.CGSize
  public let anchor: CoreGraphics.CGPoint
  public init(size: CoreGraphics.CGSize, anchor: CoreGraphics.CGPoint = CGPoint(x: 0.5, y: 0.5))
  public func process(item: YLCustomerService.ImageProcessItem, options: YLCustomerService.KingfisherOptionsInfo) -> YLCustomerService.Image?
}
public func >> (left: YLCustomerService.ImageProcessor, right: YLCustomerService.ImageProcessor) -> YLCustomerService.ImageProcessor
@objc public protocol IMUIMessageProtocol : ObjectiveC.NSObjectProtocol {
  @objc var msgId: Swift.String { get }
}
public typealias PrefetcherProgressBlock = (([YLCustomerService.Resource], [YLCustomerService.Resource], [YLCustomerService.Resource]) -> Swift.Void)
public typealias PrefetcherCompletionHandler = (([YLCustomerService.Resource], [YLCustomerService.Resource], [YLCustomerService.Resource]) -> Swift.Void)
public class ImagePrefetcher {
  public var maxConcurrentDownloads: Swift.Int
  public convenience init(urls: [Foundation.URL], options: YLCustomerService.KingfisherOptionsInfo? = nil, progressBlock: YLCustomerService.PrefetcherProgressBlock? = nil, completionHandler: YLCustomerService.PrefetcherCompletionHandler? = nil)
  public init(resources: [YLCustomerService.Resource], options: YLCustomerService.KingfisherOptionsInfo? = nil, progressBlock: YLCustomerService.PrefetcherProgressBlock? = nil, completionHandler: YLCustomerService.PrefetcherCompletionHandler? = nil)
  public func start()
  public func stop()
  @objc deinit
}
public typealias Transformer = (CoreImage.CIImage) -> CoreImage.CIImage?
public protocol CIImageProcessor : YLCustomerService.ImageProcessor {
  var filter: YLCustomerService.Filter { get }
}
extension CIImageProcessor {
  public func process(item: YLCustomerService.ImageProcessItem, options: YLCustomerService.KingfisherOptionsInfo) -> YLCustomerService.Image?
}
public struct Filter {
  public init(transform: @escaping YLCustomerService.Transformer)
  public static var tint: (YLCustomerService.Color) -> YLCustomerService.Filter
  public typealias ColorElement = (CoreGraphics.CGFloat, CoreGraphics.CGFloat, CoreGraphics.CGFloat, CoreGraphics.CGFloat)
  public static var colorControl: (YLCustomerService.Filter.ColorElement) -> YLCustomerService.Filter
}
extension Filter {
  @available(*, deprecated, renamed: "init(transform:)", message: "Use init(transform:) instead.")
  public init(tranform: @escaping YLCustomerService.Transformer)
}
extension Kingfisher where Base : YLCustomerService.Image {
  final public func apply(_ filter: YLCustomerService.Filter) -> YLCustomerService.Image
}
@_inheritsConvenienceInitializers @objc open class IMUIAttributeTextView : YLCustomerService.PasteboardTextView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect, textContainer: UIKit.NSTextContainer?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic public var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc deinit
}
public protocol ImageModifier {
  func modify(_ image: YLCustomerService.Image) -> YLCustomerService.Image
}
public struct DefaultImageModifier : YLCustomerService.ImageModifier {
  public static var `default`: YLCustomerService.DefaultImageModifier
  public func modify(_ image: YLCustomerService.Image) -> YLCustomerService.Image
}
public struct AnyImageModifier : YLCustomerService.ImageModifier {
  public init(modify: @escaping (YLCustomerService.Image) -> YLCustomerService.Image)
  public func modify(_ image: YLCustomerService.Image) -> YLCustomerService.Image
}
public struct RenderingModeImageModifier : YLCustomerService.ImageModifier {
  public let renderingMode: UIKit.UIImage.RenderingMode
  public init(renderingMode: UIKit.UIImage.RenderingMode = .automatic)
  public func modify(_ image: YLCustomerService.Image) -> YLCustomerService.Image
}
public struct FlipsForRightToLeftLayoutDirectionImageModifier : YLCustomerService.ImageModifier {
  public init()
  public func modify(_ image: YLCustomerService.Image) -> YLCustomerService.Image
}
public struct AlignmentRectInsetsImageModifier : YLCustomerService.ImageModifier {
  public let alignmentInsets: UIKit.UIEdgeInsets
  public init(alignmentInsets: UIKit.UIEdgeInsets)
  public func modify(_ image: YLCustomerService.Image) -> YLCustomerService.Image
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class IMUITextExpendContentView : UIKit.UIView, YLCustomerService.IMUIMessageContentViewProtocol {
  @objc weak public var delegate: YLCustomerService.IMUIMessageContentViewDelegate?
  @objc public static var outGoingTextColor: UIKit.UIColor?
  @objc public static var inComingTextColor: UIKit.UIColor
  @objc public static var outGoingTextFont: UIKit.UIFont
  @objc public static var inComingTextFont: UIKit.UIFont
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func layoutContentView(message: YLCustomerService.IMUIMessageModelProtocol)
  @objc deinit
}
public typealias KingfisherOptionsInfo = [YLCustomerService.KingfisherOptionsInfoItem]
public enum KingfisherOptionsInfoItem {
  case targetCache(YLCustomerService.ImageCache)
  case originalCache(YLCustomerService.ImageCache)
  case downloader(YLCustomerService.ImageDownloader)
  case transition(YLCustomerService.ImageTransition)
  case downloadPriority(Swift.Float)
  case forceRefresh
  case fromMemoryCacheOrRefresh
  case forceTransition
  case cacheMemoryOnly
  case waitForCache
  case onlyFromCache
  case backgroundDecode
  case callbackDispatchQueue(Dispatch.DispatchQueue?)
  case scaleFactor(CoreGraphics.CGFloat)
  case preloadAllAnimationData
  case requestModifier(YLCustomerService.ImageDownloadRequestModifier)
  case processor(YLCustomerService.ImageProcessor)
  case cacheSerializer(YLCustomerService.CacheSerializer)
  case imageModifier(YLCustomerService.ImageModifier)
  case keepCurrentImageWhileLoading
  case onlyLoadFirstFrame
  case cacheOriginalImage
}
precedencegroup ItemComparisonPrecedence {
  higherThan: LogicalConjunctionPrecedence
}
infix operator <== : ItemComparisonPrecedence
extension Collection where Self.Element == YLCustomerService.KingfisherOptionsInfoItem {
  public var targetCache: YLCustomerService.ImageCache? {
    get
  }
  public var originalCache: YLCustomerService.ImageCache? {
    get
  }
  public var downloader: YLCustomerService.ImageDownloader? {
    get
  }
  public var transition: YLCustomerService.ImageTransition {
    get
  }
  public var downloadPriority: Swift.Float {
    get
  }
  public var forceRefresh: Swift.Bool {
    get
  }
  public var fromMemoryCacheOrRefresh: Swift.Bool {
    get
  }
  public var forceTransition: Swift.Bool {
    get
  }
  public var cacheMemoryOnly: Swift.Bool {
    get
  }
  public var waitForCache: Swift.Bool {
    get
  }
  public var onlyFromCache: Swift.Bool {
    get
  }
  public var backgroundDecode: Swift.Bool {
    get
  }
  public var preloadAllAnimationData: Swift.Bool {
    get
  }
  public var callbackDispatchQueue: Dispatch.DispatchQueue {
    get
  }
  public var scaleFactor: CoreGraphics.CGFloat {
    get
  }
  public var modifier: YLCustomerService.ImageDownloadRequestModifier {
    get
  }
  public var processor: YLCustomerService.ImageProcessor {
    get
  }
  public var imageModifier: YLCustomerService.ImageModifier {
    get
  }
  public var cacheSerializer: YLCustomerService.CacheSerializer {
    get
  }
  public var keepCurrentImageWhileLoading: Swift.Bool {
    get
  }
  public var onlyLoadFirstFrame: Swift.Bool {
    get
  }
  public var cacheOriginalImage: Swift.Bool {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IMUIImageMessageContentView : UIKit.UIView, YLCustomerService.IMUIMessageContentViewProtocol {
  @objc weak public var delegate: YLCustomerService.IMUIMessageContentViewDelegate?
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func layoutContentView(message: YLCustomerService.IMUIMessageModelProtocol)
  @objc deinit
}
extension Bundle {
  public class func imuiInputViewBundle() -> Foundation.Bundle
}
@objc public protocol IMUIMessageStatusViewProtocol : ObjectiveC.NSObjectProtocol {
  @objc func layoutFailedStatus()
  @objc func layoutSendingStatus()
  @objc func layoutSuccessStatus()
  @objc func layoutMediaDownloading()
  @objc func layoutMediaDownloadFail()
  @objc var statusViewID: Swift.String { get }
}
extension CMSampleBuffer {
  public func imageFromSampleBuffer_Type32BGRA(sampleBuffer: CoreMedia.CMSampleBuffer) -> UIKit.UIImage
}
public protocol CacheSerializer {
  func data(with image: YLCustomerService.Image, original: Foundation.Data?) -> Foundation.Data?
  func image(with data: Foundation.Data, options: YLCustomerService.KingfisherOptionsInfo?) -> YLCustomerService.Image?
}
public struct DefaultCacheSerializer : YLCustomerService.CacheSerializer {
  public static var `default`: YLCustomerService.DefaultCacheSerializer
  public func data(with image: YLCustomerService.Image, original: Foundation.Data?) -> Foundation.Data?
  public func image(with data: Foundation.Data, options: YLCustomerService.KingfisherOptionsInfo?) -> YLCustomerService.Image?
}
@objc public protocol IMUIMessageCellLayoutProtocol : ObjectiveC.NSObjectProtocol {
  @objc var cellHeight: CoreGraphics.CGFloat { get }
  @objc var avatarFrame: CoreGraphics.CGRect { get }
  @objc var timeLabelFrame: CoreGraphics.CGRect { get }
  @objc var bubbleFrame: CoreGraphics.CGRect { get }
  @objc var bubbleContentSize: CoreGraphics.CGSize { get }
  @objc var bubbleContentInset: UIKit.UIEdgeInsets { get }
  @objc var cellContentInset: UIKit.UIEdgeInsets { get }
  @objc var statusView: YLCustomerService.IMUIMessageStatusViewProtocol { get }
  @objc var statusViewFrame: CoreGraphics.CGRect { get }
  @objc var nameLabelFrame: CoreGraphics.CGRect { get }
  @objc var bubbleContentView: YLCustomerService.IMUIMessageContentViewProtocol { get }
  @objc var bubbleContentType: Swift.String { get }
  @objc var isExpend: Swift.Bool { get set }
  @objc var isExpendText: Swift.Bool { get set }
}
extension IMUIMessageCellLayoutProtocol {
  public var avatarFrame: CoreGraphics.CGRect {
    get
  }
  public var timeLabelFrame: CoreGraphics.CGRect {
    get
  }
  public var bubbleContentInset: UIKit.UIEdgeInsets {
    get
  }
  public var cellContentInset: UIKit.UIEdgeInsets {
    get
  }
  public var statusViewFrame: CoreGraphics.CGRect {
    get
  }
}
extension Date {
  public func plus(seconds s: Swift.UInt) -> Foundation.Date
  public func minus(seconds s: Swift.UInt) -> Foundation.Date
  public func plus(minutes m: Swift.UInt) -> Foundation.Date
  public func minus(minutes m: Swift.UInt) -> Foundation.Date
  public func plus(hours h: Swift.UInt) -> Foundation.Date
  public func minus(hours h: Swift.UInt) -> Foundation.Date
  public func plus(days d: Swift.UInt) -> Foundation.Date
  public func minus(days d: Swift.UInt) -> Foundation.Date
  public func plus(weeks w: Swift.UInt) -> Foundation.Date
  public func minus(weeks w: Swift.UInt) -> Foundation.Date
  public func plus(months m: Swift.UInt) -> Foundation.Date
  public func minus(months m: Swift.UInt) -> Foundation.Date
  public func plus(years y: Swift.UInt) -> Foundation.Date
  public func minus(years y: Swift.UInt) -> Foundation.Date
  public func midnightUTCDate() -> Foundation.Date
  public static func secondsBetween(date1 d1: Foundation.Date, date2 d2: Foundation.Date) -> Swift.Int
  public static func minutesBetween(date1 d1: Foundation.Date, date2 d2: Foundation.Date) -> Swift.Int
  public static func hoursBetween(date1 d1: Foundation.Date, date2 d2: Foundation.Date) -> Swift.Int
  public static func daysBetween(date1 d1: Foundation.Date, date2 d2: Foundation.Date) -> Swift.Int
  public static func weeksBetween(date1 d1: Foundation.Date, date2 d2: Foundation.Date) -> Swift.Int
  public static func monthsBetween(date1 d1: Foundation.Date, date2 d2: Foundation.Date) -> Swift.Int
  public static func yearsBetween(date1 d1: Foundation.Date, date2 d2: Foundation.Date) -> Swift.Int
  public func isGreaterThan(_ date: Foundation.Date) -> Swift.Bool
  public func isLessThan(_ date: Foundation.Date) -> Swift.Bool
  public var day: Swift.UInt {
    get
  }
  public var month: Swift.UInt {
    get
  }
  public var year: Swift.UInt {
    get
  }
  public var hour: Swift.UInt {
    get
  }
  public var minute: Swift.UInt {
    get
  }
  public var second: Swift.UInt {
    get
  }
  public var parseDate: Swift.String {
    get
  }
}
extension Kingfisher where Base : UIKit.UIButton {
  @discardableResult
  final public func setImage(with resource: YLCustomerService.Resource?, for state: UIKit.UIControl.State, placeholder: UIKit.UIImage? = nil, options: YLCustomerService.KingfisherOptionsInfo? = nil, progressBlock: YLCustomerService.DownloadProgressBlock? = nil, completionHandler: YLCustomerService.CompletionHandler? = nil) -> YLCustomerService.RetrieveImageTask
  final public func cancelImageDownloadTask()
  @discardableResult
  final public func setBackgroundImage(with resource: YLCustomerService.Resource?, for state: UIKit.UIControl.State, placeholder: UIKit.UIImage? = nil, options: YLCustomerService.KingfisherOptionsInfo? = nil, progressBlock: YLCustomerService.DownloadProgressBlock? = nil, completionHandler: YLCustomerService.CompletionHandler? = nil) -> YLCustomerService.RetrieveImageTask
  final public func cancelBackgroundImageDownloadTask()
}
extension Kingfisher where Base : UIKit.UIButton {
  final public func webURL(for state: UIKit.UIControl.State) -> Foundation.URL?
}
extension Kingfisher where Base : UIKit.UIButton {
  final public func backgroundWebURL(for state: UIKit.UIControl.State) -> Foundation.URL?
}
public protocol Resource {
  var cacheKey: Swift.String { get }
  var downloadURL: Foundation.URL { get }
}
public struct ImageResource : YLCustomerService.Resource {
  public let cacheKey: Swift.String
  public let downloadURL: Foundation.URL
  public init(downloadURL: Foundation.URL, cacheKey: Swift.String? = nil)
}
extension URL : YLCustomerService.Resource {
  public var cacheKey: Swift.String {
    get
  }
  public var downloadURL: Foundation.URL {
    get
  }
}
public protocol IMUIAudioPlayerDelegate : ObjectiveC.NSObjectProtocol {
  func didAudioPlayerBeginPlay(_ AudioPlayer: AVFoundation.AVAudioPlayer)
  func didAudioPlayerStopPlay(_ AudioPlayer: AVFoundation.AVAudioPlayer)
  func didAudioPlayerPausePlay(_ AudioPlayer: AVFoundation.AVAudioPlayer)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IMUIAudioPlayerHelper : ObjectiveC.NSObject {
  @objc public static var sharedInstance: YLCustomerService.IMUIAudioPlayerHelper
  public typealias ProgressCallback = (Swift.String, Swift.Float, Foundation.TimeInterval, Foundation.TimeInterval) -> ()
  public typealias FinishCallback = (Swift.String) -> ()
  public typealias StopCallback = (Swift.String) -> ()
  @objc deinit
  open func playAudioWithData(_ identify: Swift.String, _ voiceData: Foundation.Data, _ progressCallback: @escaping YLCustomerService.IMUIAudioPlayerHelper.ProgressCallback, _ finishCallBack: @escaping YLCustomerService.IMUIAudioPlayerHelper.FinishCallback, _ stopCallBack: @escaping YLCustomerService.IMUIAudioPlayerHelper.StopCallback)
  open func renewProgressCallback(_ identfy: Swift.String, progressCallback: @escaping YLCustomerService.IMUIAudioPlayerHelper.ProgressCallback)
  @objc open func stopAudio()
}
extension IMUIAudioPlayerHelper : AVFoundation.AVAudioPlayerDelegate {
  @objc dynamic public func audioPlayerDidFinishPlaying(_ player: AVFoundation.AVAudioPlayer, successfully flag: Swift.Bool)
}
extension String : YLCustomerService.KingfisherCompatible {
  public typealias CompatibleType = YLCustomerService.Kingfisher<Swift.String>
}
extension Kingfisher where Base == Swift.String {
  final public var md5: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class IMUIWebImageTaskCache : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class IMUITextAttributeContentView : UIKit.UIView, YLCustomerService.IMUIMessageContentViewProtocol, YLCustomerService.PasteboardTextViewDelegateall {
  @objc weak public var delegate: YLCustomerService.IMUIMessageContentViewDelegate?
  @objc public static var outGoingTextColor: UIKit.UIColor?
  @objc public static var inComingTextColor: UIKit.UIColor
  @objc public static var outGoingTextFont: UIKit.UIFont
  @objc public static var inComingTextFont: UIKit.UIFont
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func layoutContentView(message: YLCustomerService.IMUIMessageModelProtocol)
  @objc public func getContentSelected(_ attach: UIKit.NSTextAttachment!)
  @objc deinit
}
public protocol Placeholder {
  func add(to imageView: YLCustomerService.ImageView)
  func remove(from imageView: YLCustomerService.ImageView)
}
extension Placeholder where Self : YLCustomerService.Image {
  public func add(to imageView: YLCustomerService.ImageView)
  public func remove(from imageView: YLCustomerService.ImageView)
}
extension UIImage : YLCustomerService.Placeholder {
}
extension Placeholder where Self : YLCustomerService.View {
  public func add(to imageView: YLCustomerService.ImageView)
  public func remove(from imageView: YLCustomerService.ImageView)
}
extension UIColor {
  @objc dynamic public convenience init(red: Swift.Int, green: Swift.Int, blue: Swift.Int)
  @objc dynamic public convenience init(netHex: Swift.Int)
  @objc dynamic public class func hexStringToUIColor(hex: Swift.String) -> UIKit.UIColor
}
@objc public protocol IMUIInputViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func sendTextMessage(_ messageText: Swift.String)
  @objc optional func switchToMicrophoneMode(recordVoiceBtn: UIKit.UIButton)
  @objc optional func startRecordVoice()
  @objc optional func finishRecordVoice(_ voicePath: Swift.String, durationTime: Swift.Double)
  @objc optional func cancelRecordVoice()
  @objc optional func switchToGalleryMode(photoBtn: UIKit.UIButton)
  @objc optional func didSeletedGallery(AssetArr: [Photos.PHAsset])
  @objc optional func switchToCameraMode(cameraBtn: UIKit.UIButton)
  @objc optional func didShootPicture(picture: Foundation.Data)
  @objc optional func switchToEmojiMode(cameraBtn: UIKit.UIButton)
  @objc optional func didSeletedEmoji(emoji: YLCustomerService.IMUIEmojiModel)
  @objc optional func startRecordVideo()
  @objc optional func finishRecordVideo(videoPath: Swift.String, durationTime: Swift.Double)
  @objc optional func keyBoardWillShow(height: CoreGraphics.CGFloat, durationTime: Swift.Double)
  @objc optional func textDidChange(text: Swift.String)
  @objc optional func cameraFullScreen()
  @objc optional func cameraRecoverScreen()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IMUIVideoStatusContentView : UIKit.UIView, YLCustomerService.IMUIMessageContentViewProtocol {
  @objc weak public var delegate: YLCustomerService.IMUIMessageContentViewDelegate?
  public static var outGoingVideoDurationColor: UIKit.UIColor
  public static var inComingVideoDurationColor: UIKit.UIColor
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func layoutContentView(message: YLCustomerService.IMUIMessageModelProtocol)
  @objc deinit
}
@objc public protocol IMUIMessageMessageCollectionViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func messageCollectionView(_: UIKit.UICollectionView, forItemAt: Foundation.IndexPath, model: YLCustomerService.IMUIMessageProtocol)
  @objc optional func messageCollectionView(didTapMessageBubbleInCell: UIKit.UICollectionViewCell, model: YLCustomerService.IMUIMessageProtocol)
  @objc optional func messageCollectionView(beganLongTapMessageBubbleInCell: UIKit.UICollectionViewCell, model: YLCustomerService.IMUIMessageProtocol)
  @objc optional func messageCollectionView(didTapHeaderImageInCell: UIKit.UICollectionViewCell, model: YLCustomerService.IMUIMessageProtocol)
  @objc optional func messageCollectionView(didTapStatusViewInCell: UIKit.UICollectionViewCell, model: YLCustomerService.IMUIMessageProtocol)
  @objc optional func messageCollectionView(_: UIKit.UICollectionView, willDisplayMessageCell: UIKit.UICollectionViewCell, forItemAt: Foundation.IndexPath, model: YLCustomerService.IMUIMessageProtocol)
  @objc optional func messageCollectionView(_: UIKit.UICollectionView, didEndDisplaying: UIKit.UICollectionViewCell, forItemAt: Foundation.IndexPath, model: YLCustomerService.IMUIMessageProtocol)
  @objc optional func messageCollectionView(_ willBeginDragging: UIKit.UICollectionView)
  @objc optional func messageCollectionView(messageCollectionView: UIKit.UICollectionView, forItemAt: Foundation.IndexPath, messageModel: YLCustomerService.IMUIMessageProtocol) -> UIKit.UICollectionViewCell?
  @objc optional func messageCollectionView(messageCollectionView: UIKit.UICollectionView, heightForItemAtIndexPath forItemAt: Foundation.IndexPath, messageModel: YLCustomerService.IMUIMessageProtocol) -> Foundation.NSNumber?
  @objc optional func messageCollectionView(messageCollectionView: UIKit.UICollectionView, didSelectItemAt: Foundation.IndexPath, messageModel: YLCustomerService.IMUIMessageProtocol)
  @objc optional func messageCollectionView(selectedIndex: Swift.Int, didTapCustomCell: UIKit.UICollectionViewCell, model: YLCustomerService.IMUIMessageProtocol)
  @objc optional func messageCollectionView(selectedIndex: Swift.Int, didTapRobotCell: UIKit.UICollectionViewCell, model: YLCustomerService.IMUIMessageProtocol)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class IMUITextRobotExpendContentView : UIKit.UIView, YLCustomerService.IMUIMessageContentViewProtocol {
  @objc weak public var delegate: YLCustomerService.IMUIMessageContentViewDelegate?
  @objc public static var outGoingTextColor: UIKit.UIColor?
  @objc public static var inComingTextColor: UIKit.UIColor
  @objc public static var outGoingTextFont: UIKit.UIFont
  @objc public static var inComingTextFont: UIKit.UIFont
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func layoutContentView(message: YLCustomerService.IMUIMessageModelProtocol)
  @objc deinit
}
public typealias DownloadProgressBlock = ((Swift.Int64, Swift.Int64) -> Swift.Void)
public typealias CompletionHandler = ((YLCustomerService.Image?, Foundation.NSError?, YLCustomerService.CacheType, Foundation.URL?) -> Swift.Void)
@_hasMissingDesignatedInitializers final public class RetrieveImageTask {
  public static var empty: YLCustomerService.RetrieveImageTask
  final public var downloadTask: YLCustomerService.RetrieveImageDownloadTask?
  final public func cancel()
  @objc deinit
}
public var KingfisherErrorDomain: Swift.String
@_hasMissingDesignatedInitializers public class KingfisherManager {
  public static var shared: YLCustomerService.KingfisherManager
  public var cache: YLCustomerService.ImageCache
  public var downloader: YLCustomerService.ImageDownloader
  public var defaultOptions: [YLCustomerService.KingfisherOptionsInfoItem]
  @discardableResult
  public func retrieveImage(with resource: YLCustomerService.Resource, options: YLCustomerService.KingfisherOptionsInfo?, progressBlock: YLCustomerService.DownloadProgressBlock?, completionHandler: YLCustomerService.CompletionHandler?) -> YLCustomerService.RetrieveImageTask
  @objc deinit
}
public typealias Image = UIKit.UIImage
public typealias Color = UIKit.UIColor
public typealias ImageView = UIKit.UIImageView
public typealias View = UIKit.UIView
public typealias Button = UIKit.UIButton
final public class Kingfisher<Base> {
  final public let base: Base
  public init(_ base: Base)
  @objc deinit
}
public protocol KingfisherCompatible {
  associatedtype CompatibleType
  var kf: Self.CompatibleType { get }
}
extension KingfisherCompatible {
  public var kf: YLCustomerService.Kingfisher<Self> {
    get
  }
}
extension UIImage : YLCustomerService.KingfisherCompatible {
  public typealias CompatibleType = YLCustomerService.Kingfisher<UIKit.UIImage>
}
extension UIImageView : YLCustomerService.KingfisherCompatible {
  public typealias CompatibleType = YLCustomerService.Kingfisher<UIKit.UIImageView>
}
extension UIButton : YLCustomerService.KingfisherCompatible {
  public typealias CompatibleType = YLCustomerService.Kingfisher<UIKit.UIButton>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class IMUITextRobotContentView : UIKit.UIView, YLCustomerService.IMUIMessageContentViewProtocol {
  @objc weak public var delegate: YLCustomerService.IMUIMessageContentViewDelegate?
  @objc public static var outGoingTextColor: UIKit.UIColor?
  @objc public static var inComingTextColor: UIKit.UIColor
  @objc public static var outGoingTextFont: UIKit.UIFont
  @objc public static var inComingTextFont: UIKit.UIFont
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func layoutContentView(message: YLCustomerService.IMUIMessageModelProtocol)
  @objc deinit
}
@objc public protocol IMUIMessageContentViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc func click(index: Swift.Int)
  @objc func clickRobot(index: Swift.Int)
}
@objc public protocol IMUIMessageContentViewProtocol : ObjectiveC.NSObjectProtocol {
  @objc func layoutContentView(message: YLCustomerService.IMUIMessageModelProtocol)
  @objc optional func Activity()
  @objc optional func inActivity()
  @objc weak var delegate: YLCustomerService.IMUIMessageContentViewDelegate? { get set }
}
extension UIView {
  public var imui_left: CoreGraphics.CGFloat {
    get
    set(newValue)
  }
  public var imui_top: CoreGraphics.CGFloat {
    get
    set(newValue)
  }
  public var imui_right: CoreGraphics.CGFloat {
    get
    set(newValue)
  }
  public var imui_bottom: CoreGraphics.CGFloat {
    get
    set(newValue)
  }
  public var imui_centerX: CoreGraphics.CGFloat {
    get
    set(newValue)
  }
  public var imui_centerY: CoreGraphics.CGFloat {
    get
    set(newValue)
  }
  public var imui_width: CoreGraphics.CGFloat {
    get
    set(newValue)
  }
  public var imui_height: CoreGraphics.CGFloat {
    get
    set(newValue)
  }
  public var imui_origin: CoreGraphics.CGPoint {
    get
    set(newValue)
  }
  public var imui_size: CoreGraphics.CGSize {
    get
    set(newValue)
  }
  public func move(with vector: CoreGraphics.CGVector)
  public func positionInLeftSide(with point: CoreGraphics.CGPoint) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IMUIVoiceMessageContentView : UIKit.UIView, YLCustomerService.IMUIMessageContentViewProtocol {
  @objc weak public var delegate: YLCustomerService.IMUIMessageContentViewDelegate?
  public static var outGoingVoiceDurationColor: UIKit.UIColor
  public static var inComingVoiceDurationColor: UIKit.UIColor
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func layoutContentView(message: YLCustomerService.IMUIMessageModelProtocol)
  @objc deinit
}
extension String {
  public func heightWithConstrainedWidth(width: CoreGraphics.CGFloat, font: UIKit.UIFont) -> CoreGraphics.CGFloat
  public func sizeWithConstrainedWidth(with width: CoreGraphics.CGFloat, font: UIKit.UIFont) -> CoreGraphics.CGSize
}
@objc public enum IMUIInputViewItemPosition : Swift.UInt {
  case left = 0
  case right
  case bottom
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class IMUICustomInputView : UIKit.UIView {
  @objc open var inputTextViewPadding: UIKit.UIEdgeInsets
  @objc open var inputTextViewHeightRange: UIKit.UIFloatRange
  @objc open var inputTextViewTextColor: UIKit.UIColor
  @objc open var inputTextViewFont: UIKit.UIFont
  @objc weak open var inputViewDelegate: YLCustomerService.IMUICustomInputViewDelegate?
  @objc open var dataSource: YLCustomerService.IMUICustomInputViewDataSource? {
    @objc get
    @objc set(newValue)
  }
  @objc @IBOutlet weak open var bottomInputBarItemListView: YLCustomerService.IMUIFeatureListView!
  @objc @IBOutlet weak open var featureView: YLCustomerService.IMUIFeatureView!
  @objc @IBOutlet weak open var inputTextView: UIKit.UITextView!
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc override dynamic open func awakeFromNib()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func layoutInputBar()
  @objc public func setBackgroundColor(color: UIKit.UIColor)
  public func register(_ cellClass: Swift.AnyClass?, in position: YLCustomerService.IMUIInputViewItemPosition, forCellWithReuseIdentifier identifier: Swift.String)
  public func register(_ nib: UIKit.UINib?, in position: YLCustomerService.IMUIInputViewItemPosition, forCellWithReuseIdentifier identifier: Swift.String)
  public func registerForFeatureView(_ cellClass: Swift.AnyClass?, forCellWithReuseIdentifier identifier: Swift.String)
  public func registerForFeatureView(_ nib: UIKit.UINib?, forCellWithReuseIdentifier identifier: Swift.String)
  @objc public func updateInputBarItemCell(_ position: YLCustomerService.IMUIInputViewItemPosition, at index: Swift.Int)
  @objc public func reloadFeaturnView()
  @objc public func reloadData()
  @objc public func layoutInputView()
  @objc public func showFeatureView()
  @objc public func hideFeatureView()
  @objc deinit
}
extension IMUICustomInputView : UIKit.UITextViewDelegate {
  @objc dynamic public func textViewDidChange(_ textView: UIKit.UITextView)
  @objc dynamic public func textViewShouldBeginEditing(_ textView: UIKit.UITextView) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IMUIMessageDefaultStatusView : UIKit.UIButton, YLCustomerService.IMUIMessageStatusViewProtocol {
  @objc public func layoutMediaDownloading()
  @objc public func layoutMediaDownloadFail()
  @objc public var statusViewID: Swift.String {
    @objc get
  }
  @objc override dynamic public var frame: CoreGraphics.CGRect {
    @objc get
    @objc set(value)
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func layoutFailedStatus()
  @objc public func layoutSendingStatus()
  @objc public func layoutSuccessStatus()
  @objc deinit
}
@objc public protocol IMUIMessageModelProtocol : YLCustomerService.IMUIMessageProtocol {
  @objc var fromUser: YLCustomerService.IMUIUserProtocol { get }
  @objc var layout: YLCustomerService.IMUIMessageCellLayoutProtocol { get }
  @objc var resizableBubbleImage: UIKit.UIImage { get }
  @objc var timeString: Swift.String { get }
  @objc func text() -> Swift.String
  @objc func dictionary() -> Swift.Dictionary<Swift.String, Any>
  @objc func mediaFilePath() -> Swift.String
  @objc optional func webImageUrl() -> Swift.String
  @objc var duration: CoreGraphics.CGFloat { get }
  @objc var isOutGoing: Swift.Bool { get }
  @objc var messageStatus: YLCustomerService.IMUIMessageStatus { get }
  @objc optional func atPersons() -> [Swift.String]?
  @objc optional func previewImage() -> UIKit.UIImage?
  @objc optional func uploadProgress() -> CoreGraphics.CGFloat
}
